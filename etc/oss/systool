#!/bin/bash 
#
# Copyright (c) 2014 EMC Corporation
# All Rights Reserved
#
# This software contains the intellectual property of EMC Corporation
# or is licensed to EMC Corporation from third parties.  Use of this
# software and the intellectual property contained therein is expressly
# limited to the terms and conditions of the License Agreement under which
# it is provided by or on behalf of EMC.
#
# /etc/systool
#

export PATH=/bin:/bin:/sbin:/usr/bin:/usr/sbin

. /etc/rc.status
set -e

_usage() {
    set +Ex
    echo "Usage: $0 --getprops"         >&2
    echo "   or: $0 --get-controller-ovfprops" >&2
    echo "   or: $0 --set-controller-ovfprops file" >&2
    echo "   or: $0 --getoverrides"     >&2
    echo "   or: $0 --setoverrides file" >&2
    echo "   or: $0 --getvdcprops"      >&2
    echo "   or: $0 --setvdcprops file" >&2
    echo "   or: $0 --getsslprops"      >&2
    echo "   or: $0 --setsslprops file" >&2
    echo "   or: $0 --reboot"           >&2
    echo "   or: $0 --poweroff"         >&2
    echo "   or: $0 --reconfig"         >&2
    echo "   or: $0 --reconfig-props [ntp] [dns] [ssh] [connectemc] [password]" >&2
    echo "   or: $0 --reconfig-security" >&2
    echo "   or: $0 --restart service"  >&2
    echo "   or: $0 --reload ntp|ssh|connectemc" >&2
    echo "   or: $0 --dhparam generate dhparam" >&2
    exit 2
}

_info() {
    echo "$0: Info: $*" >&2
}

_warn() {
    echo "$0: Warning: $*" >&2
}

_fatal() {
    set +Ex
    echo "$0: Error: $*" >&2
    exit 1
}

_fatal2() {
    local code=${1:-1} ; shift
    set +Ex
    echo "$0: Error: $*" >&2
    exit ${code}
}

_err_handler() {
    set +E
    _fatal "Line ${LINENO}: $(eval echo \"${BASH_COMMAND}\")"
}

_exit_handler() {
    set +E
    for action in "${on_exit_actions[@]}" ; do
        eval "${action}"
    done
}

_set_on_exit() {
    on_exit_actions=( "${@}" "${on_exit_actions[@]}" )
}

_exit_handler() {
     set +E
     for action in "${on_exit_actions[@]}" ; do 
         eval "${action}"
     done
}

_set_traps() {
     declare -a on_exit_actions
     trap '' SIGINT
     trap '' SIGTERM
     trap _exit_handler EXIT
     trap 'set +Ex ; _fatal "Line ${LINENO}: $(eval echo \"${BASH_COMMAND}\")"' ERR
     if [ -n "${*}" ] ; then set "${@}" ; fi
}

lock_file=/tmp/${0##*/}.lock
lock_timeout=${lock_timeout:-30}

_s() {
    ( _set_traps -E && flock -s -w "${lock_timeout}" 200 && "${@}" ) 200>${lock_file}
}

_x() {
    ( _set_traps -E && flock -x -w "${lock_timeout}" 200 && "${@}"  ) 200>${lock_file}
}

_read_file() {
    [ -f "${1}" ] || _fatal "${1}: No such file"
    echo "$(<${1})"
}

_read_override_file() {
    if [ -f "${1}" ] ; then
        cat "${1}"
    fi
}

_get_override_props_path() {
    [ -e "${bootfs_override_props}" ] || _fatal "${bootfs_override_props}: No such file"
    echo "${bootfs_override_props}"
}

_get_props() {
    [ ! -f "${1}" ] || ovf_props_file="${1}"
    [ ! -f "${2}" ] || override_link="${2}"
    [ ! -f "${3}" ] || dflts_file="${3}"
    _props_trymerge  
}

_get_override_props() {
    _read_override_file "${bootfs_override_props}"
}

_get_controller_props() {
    if [ -f "${bootfs_controller_props}" ] ; then
        _read_file "${bootfs_controller_props}"
    fi
}

_get_vdc_props() {
    if [ -f "${bootfs_vdc_props}" ] ; then
        _read_file "${bootfs_vdc_props}"
    fi
}

_get_ssl_props() {
    if [ -f "${bootfs_ssl_props}" ] ; then
        _read_file "${bootfs_ssl_props}"
    fi
}

_write_props_file() {
    local s && s=$(<"${1}")
    if [  -e "${2}" ] ; then
        [ "${s}" != "$(<"${2}")" ] || return 0
        mv "${2}" "${2}~"
    fi
    mkdir -p      "${2%/*}"
    cp /dev/null  "${2}"
    chmod 600     "${2}"
    echo "${s}"  >"${2}"

}

_set_vdc_props() {
    _write_props_file "${1}" "${bootfs_vdc_props}"
}

_set_ssl_props() {
    _write_props_file "${1}" "${bootfs_ssl_props}"
}

_get_ovf_props() {
    _read_file "${ovf_props_file}"
}

_get_props_defaults() {
    _read_file "${dflts_file}"
}

_write_file_and_set_permissions() {
    mkdir -p "${1%/*}"
    cp /dev/null "${1}"
    chmod 600 "${1}"
    echo "${2}" >"${1}"
}

_set_override_props() {
    local s && s=$(<"${1}")
    if [  -e "${bootfs_override_props}" ] ; then
        [ "${s}" != "$(<"${bootfs_override_props}")" ] || return 0
        mv "${bootfs_override_props}" "${bootfs_override_props}~"
    fi

    _write_file_and_set_permissions "${bootfs_override_props}" "${s}"
    _props_symlink
}

_set_controller_props() {
    local s && s=$(<"${1}")
     if [  -e "${bootfs_controller_props}" ] ; then
        [ "${s}" != "$(<"${bootfs_controller_props}")" ] || return 0
        mv "${bootfs_controller_props}" "${bootfs_controller_props}~"
    fi

    _write_file_and_set_permissions "${bootfs_controller_props}" "${s}"
}

_reboot() {
    exec /sbin/reboot
    _fatal "Failed to exec /sbin/reboot"
}

_poweroff() {
    exec /sbin/poweroff
    _fatal "Failed to exec /sbin/poweroff"
}

_reconfig() {
    exec /etc/genconfig <<EOF
$(_get_props)
EOF
    _fatal     "Failed to exec /etc/genconfig"
}

_reconfig_props() {
    exec /etc/genconfig ${1} <<EOF
$(_get_props)
EOF
    _fatal     "Failed to exec /etc/genconfig ${1}"
}

_reconfig_security() {
	_props_symlink
    local tmp_ovf_props=${override_link}
    exec /etc/genconfig --config security <<EOF
$(_get_props ${tmp_ovf_props})
EOF
    _fatal     "Failed to exec /etc/genconfig --config security"
}

_restart() {
    /usr/bin/systemctl restart storageos-${1%*svc} || _fatal2 67 "Unexpected restart ${1} failure. Error code $?"
}

_reload() {
    case ${1} in
        ntp)     
            exec /usr/bin/systemctl restart ntpd ;;
        ssh)
            exec /usr/bin/systemctl restart sshd ;;
        connectemc)
            exec /usr/bin/systemctl restart connectemc ;;
        ssl)
            exec /usr/bin/systemctl restart nginx ;;
        firewall)
            exec /usr/bin/systemctl restart SuSEfirewall2 ;;
        ipsec)
            echo "skip reload ipsec in oss platform" ;;
        *)
            _fatal2 2 "Unsupported service type ${1}" ;;
    esac
}

_initialize_ovfenv_props() {
    _props_symlink

    if [ -s ${ovf_props_file} ]; then
        echo "${ovf_props_file} exists and will be reused"
        return
    fi

    echo "${ovf_props_file} not found. Please specify:"
    read -p "The number of nodes [1]: " node_count
    node_count=${node_count:-1}
    ovfenv+="node_count=${node_count}${nl}"

    for index in $(seq 1 ${node_count}); do
        read -p "The IPv4 address of node index ${index}: " ipaddr
        ovfenv+="network_${index}_ipaddr=${ipaddr}${nl}"

        read -p "The IPv6 address of node index ${index} [::0]: " ipaddr6
        ipaddr6=${ipaddr6:-::0}
        ovfenv+="network_${index}_ipaddr6=${ipaddr6}${nl}"
    done

    read -p "The IPv4 gateway: " gateway
    ovfenv+="network_gateway=${gateway}${nl}"

    read -p "The IPv6 gateway [::0]: " gateway6
    gateway6=${gateway6:-::0}
    ovfenv+="network_gateway6=${gateway6}${nl}"

    read -p "The netmask [255.255.255.0]: " netmask
    netmask=${netmask:-255.255.255.0}
    ovfenv+="network_netmask=${netmask}${nl}"

    read -p "The IPv6 prefix length [64]: " prefix_length
    prefix_length=${prefix_length:-64}
    ovfenv+="network_prefix_length=${prefix_length}${nl}"

    read -p "The IPv4 virtual IP: " vip
    ovfenv+="network_vip=${vip}${nl}"

    read -p "The IPv6 virtual IP [::0]: " vip6
    vip6=${vip6:-::0}
    ovfenv+="network_vip6=${vip6}${nl}"

    read -p "The index of the current node [1]: " node_index
    node_index=${node_index:-1}
    ovfenv+="node_id=vipr${node_index}"

    echo "${ovfenv}" > ${ovf_props_file}
}

_initialize_iterable_props() {
    local expanded_props="$(_expand_iterable_props "${iters_file}" "$(<${ovf_props_file})")"
    _props_append "${dflts_file}" "${expanded_props}"
    chown storageos:storageos "${dflts_file}"
}

_props_append() {
    chmod 400 "${1}" &&
    for i in ${2} ; do
        grep -q -F "${i%=*}" ${1} || echo $i >> "${1}"
    done
    sort "${1}" -o "${1}"
}

_expand_iterable_props() {
    while read line ; do
        for nodeid in $(_get_node_ids "${2}") ; do
            if [ "${nodeid}" == "standalone" ]; then
                line="${line/vipr/}"
            fi
            echo "${line//\$\{iter\}/${nodeid}}"
        done
    done < "${1}"
}

_get_node_ids() {
    if _get_ovf_property 'network_1_ipaddr' "${1}" &>/dev/null ; then
        seq --separator=' ' $(_get_ovf_property 'node_count' "${1}")
    else
        echo 'standalone'
    fi
}

_get_ovf_property() {
   ( IFS="${nl}" ; for arg in ${2} ; do
          [ "${1}" = "${arg%%=*}" ] && arg="${arg#*=}" && arg="${arg//\\n/${nl}}" && echo "${arg}" && return 0
      done
      return 1
   )
}

_initialize_props() {
    _props_symlink &&
    _initialize_ovfenv_props &&
    _initialize_iterable_props

}

# Write the properties file with the write permissions
#
_props_write() {
   rm -f "${1}" && cp /dev/null "${1}" && chmod 400 "${1}" && echo "${2}" >>"${1}"
}

_props_trymerge() {
    _debug() {
        [ -n "${DEBUG}" ] || return 0
        local k=${1} && shift
        local x && for x in "${@}" ; do echo "*** ${k} ${x}" >&2 ; done
    }

    _merge() {
        local -a rlines=()
        while [ ${#olines[@]} -gt 0 -o ${#clines[@]} -gt 0 -o ${#dlines[@]} -gt 0 ] ; do
            _debug "*" "o=${#olines[@]} c=${#clines[@]} d=${#dlines[@]}"
            _debug "o" "${olines[@]}"
            _debug "c" "${clines[@]}"
            _debug "d" "${dlines[@]}"
            _debug "r" "${rlines[@]}"
            _debug "-" "-----------------------------------------"
            local oline=${olines[0]}
            local cline=${clines[0]}
            local dline=${dlines[0]}
            local okey=${oline%%=*}
            local ckey=${cline%%=*}
            local dkey=${dline%%=*}
            local key=
            if [[ ! -z "${okey}" ]] ; then
                key=${okey}
            elif [[ ! -z "${ckey}" ]] ; then
                key=${ckey}
            elif [[ ! -z "${dkey}" ]] ; then
                key=${dkey}
            else
                break
            fi

            if [[ "${ckey}" < "${key}" ]] ; then
                if [[ ! -z "${ckey}" ]] ; then
                    key=${ckey}
                fi
            fi
            if [[ "${dkey}" < "${key}" ]] ; then
                if [[ ! -z "${dkey}" ]] ; then
                    key=${dkey}
                fi
            fi

            if [[ "${key}" == "${okey}" ]] ; then
                rlines+=( "${oline}" )
                olines=( "${olines[@]:1}" )
                if [[ "${key}" == "${ckey}" ]] ; then
                    clines=( "${clines[@]:1}" )
                fi
                if [[ "${key}" == "${dkey}" ]] ; then
                    dlines=( "${dlines[@]:1}" )
                fi
            elif [[ "${key}" == "${ckey}" ]] ; then
                rlines+=( "${cline}" )
                clines=( "${clines[@]:1}" )
                if [[ "${key}" == "${dkey}" ]] ; then
                    dlines=( "${dlines[@]:1}" )
                fi
            else
                rlines+=( "${dline}" )
                dlines=( "${dlines[@]:1}" )
            fi
        done
        local rline && for rline in "${rlines[@]}" ; do echo "${rline}" ; done
    }

    # Three Way Merge of OVF Properties, Override Properties, and Defaults
    # - Read the properties defaults into ${dflts}, OVF properties into ${ovf_props}, and Overrides into ${overrides}
    # - The Overrides are simply cached properties that the user has mutated
    # - The OVF props have priority 1, Overrides have priority 2, amd Defaults have priority 3
    # - Echo the result of the merge
    #
    if [ ! -f "${override_link}" ] ; then
        echo >> "${override_link}"
    fi
    local dflts && dflts=$(<"${dflts_file}") && local ovf_props && ovf_props=$(<"${ovf_props_file}") && local overrides && overrides=$(<"${override_link}") && {
        local    ifs="${IFS}"
        IFS="${nl}"
        local -a dlines=( ${dflts} )
        local -a olines=( ${ovf_props} )
        local -a clines=( ${overrides} )
        IFS="${ifs}"

        echo "$(_merge)"
 
        if [ -f "${bootfs_vdc_props}" ] ; then
            cat  "${bootfs_vdc_props}"
        fi

        if [ -f "${bootfs_ssl_props}" ] ; then
            cat  "${bootfs_ssl_props}"
        fi
    }
}

# Install ${override_link} -> $(/etc/systool --getoverrideprops-path)
# - Get the bootfs target and the current ${override_link} target
# - If the correct symlink is already in place do nothing
#
_props_symlink() {
    local old_target && old_target=$(readlink "${override_link}") || old_target=""
    local new_target=${bootfs_override_props}
    if ! new_target=$(_get_override_props_path 2>/dev/null) ; then
        :
    elif [ "${old_target}" = "${new_target}" ] ; then
        return 0
    else
        rm -f "${override_link}" && ln -s "${new_target}" "${override_link}"
    fi
}

# Defaults
bootfs_mntp=${bootfs_mntp:-'/opt/storageos'}
bootfs_vdc_props=${bootfs_vdc_props:-${bootfs_mntp}/etc/vdcconfig.properties}
bootfs_ssl_props=${bootfs_ssl_props:-${bootfs_mntp}/etc/ssl.properties}
override_props='config-override.properties'
bootfs_override_props=${bootfs_mntp}/etc/${override_props}
override_link='/etc/'${override_props}
dflts_file='/etc/config.defaults'
ovf_props_file='/etc/ovfenv.properties'
iters_file='/etc/.iterable.properties'
ssl_props_file='/etc/ssl.properties'
bootfs_controller_props=${bootfs_mntp}/etc/controller-ovf.properties
nl='
'

DO_NOT_INCLUDE="no"

rc_reset

# Parse flags and hacks
while [ $# -gt 0 ] ; do
    case ${1} in
        -x|--xtrace|--debug)
            set -x                ; shift ; continue ;;
        --DO_NOT_INCLUDE=*)
            DO_NOT_INCLUDE="${1#*=}" ; shift ; continue ;;
        *)
            break ;;
    esac
done

# Parse options
#_set_traps -E
case ${#} in
    1)  case ${1} in
            --get-default|--list)     cat /opt/storageos/etc/product ;;
            --reboot)                 _reboot ;;
            --poweroff)               _poweroff ;;
            --reconfig)               _x _reconfig ;;
            --reconfig-security)      _x _reconfig_security ;;
            --getprops)               _s _get_props   ;;
            --getoverrides)           _s _get_override_props ;;
            --get-controller-ovfprops) _s _get_controller_props ;;            
            --getvdcprops)            _s _get_vdc_props ;;
            --getsslprops)            _s _get_ssl_props ;;
            --initializeprops)        _x _initialize_props ;;
            --is-appliance)           echo "false" ;;
            --dhparam)                exit 0 ;;

            *)                        _usage
        esac;;
    2)  case ${1} in
            --setoverrides)           _x _set_override_props   "${2}" ;;
            --set-controller-ovfprops) _x _set_controller_props "${2}" ;;            
            --setvdcprops)            _x _set_vdc_props        "${2}" ;;
            --setsslprops)            _x _set_ssl_props        "${2}" ;;
            --restart)                _x _restart              "${2}" ;;
            --reconfig-props)          _x _reconfig_props       "${2}" ;;
            --reload)                 _x _reload               "${2}" ;;
            *)                        _usage
        esac;;
    4)  case ${1} in 
            --getprops)               _s _get_props "${2}" "${3}" "${4}" ;;
            *)
        esac;;
    *)  _usage
esac

rc_exit
